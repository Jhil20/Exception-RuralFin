// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum Definitions
enum EnumStatus {
  ACTIVE
  INACTIVE
}

enum TransactionType {
  WITHDRAW
  DEPOSIT
}

enum PaymentMode {
  CASH
  DIGITAL
}

// User Model
model User {
  user_id       String   @id @default(uuid())
  full_name     String
  phone_number  String   @unique
  email         String?  @unique
  gender        String?
  age           String?
  income        Decimal?
  budget_limit  Decimal?
  refresh_token String?
  created_at    DateTime @default(now())
  address       String?
  pincode       String?
  city          String?
  state         String?
  Agent         UserAgentTransaction[]
  sentTransaction  PeerToPeerTransaction[] @relation(name: "SenderRelation")
  receivedTransaction  PeerToPeerTransaction[] @relation(name: "RecipientRelation")

  NotificationSender NotificationUser[]   @relation(name: "notification-sender")
  NotificationRecipent NotificationUser[]   @relation(name: "notification-recipent")

  userWallet        UserWallet? 

}

// User Wallet Model
model UserWallet {
  wallet_id   String  @id
  user_balance Decimal @default(0.00)
  user_id     String  @unique
  user_pin    String?
  created_at  DateTime @default(now())

  user        User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

// Agent Model
model Agent {
  agent_id      String    @id @default(uuid())
  full_name     String
  phone_num     String    @unique
  email         String?   @unique
  refresh_token String?
  created_at    DateTime  @default(now())
  address       String?
  pincode       String?
  city          String?
  state         String?
  status        EnumStatus @default(INACTIVE)
  bank_details  String?  @unique
  deposit_ending_date DateTime?
  bond_deposit_amount Decimal?
  rating        Decimal?
  user          UserAgentTransaction[]
  agentWallet   AgentWallet?
  agentAdmin    AgentAdminTransaction?
}

// Agent Wallet Model
model AgentWallet {
  wallet_id      String  @id
  wallet_balance Decimal @default(0.00)
  agent_pin      String?
  created_at     DateTime @default(now())
  agent_id       String  @unique

  agent         Agent @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
}

// Agent-Admin Transactions
model AgentAdminTransaction {
  transaction_id String  @id @default(uuid())
  security_deposit_amt Decimal
  agent_id     String @unique
  date_time    DateTime @default(now())
  payment_mode PaymentMode

  agent        Agent @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
}

// User-Agent Transactions
model UserAgentTransaction {
  transaction_id String   @id @default(uuid())
  user_id       String
  agent_id      String
  amount        Decimal
  transaction_type TransactionType
  date_time     DateTime @default(now())

  user         User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  agent        Agent @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
}

// Peer-to-Peer Transactions
model PeerToPeerTransaction {
  transaction_id String   @id @default(uuid())
  sender_id       String
  recipient_id  String
  amount        Decimal
  date_time     DateTime @default(now())

  sender        User @relation(name: "SenderRelation",fields: [sender_id], references: [user_id], onDelete: Cascade)
  recipient     User @relation(name: "RecipientRelation",fields: [recipient_id], references: [user_id], onDelete: Cascade)

}

model NotificationUser{
  id          String   @id @default(uuid())
  sender_id      String   // The recipient of the notification
  recipent_id    String   // The user who sent the notification
  message     String   // Custom message
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender        User     @relation(name: "notification-sender",fields: [sender_id], references: [user_id], onDelete: Cascade)
  receipent     User     @relation(name: "notification-recipent",fields: [recipent_id],references: [user_id],onDelete: Cascade)
}